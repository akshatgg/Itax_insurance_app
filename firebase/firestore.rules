rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is accessing their own data
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Helper function to check if all required fields are present
    function hasRequiredFields(requiredFields) {
      return requiredFields.every(field => request.resource.data[field] != null);
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
    
    // Insurance applications
    match /insuranceApplications/{applicationId} {
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.userId || 
        request.auth.token.admin == true
      );
      allow delete: if false; // Don't allow deletion of applications
    }
    
    // Insurance policies
    match /insurancePolicies/{policyId} {
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow create: if false; // Only created by backend
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.userId || 
        request.auth.token.admin == true
      );
      allow delete: if false; // Don't allow deletion of policies
    }
    
    // Claims
    match /claims/{claimId} {
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.userId || 
        request.auth.token.admin == true
      );
      allow delete: if false; // Don't allow deletion of claims
    }
    
    // Document scans
    match /documentScans/{scanId} {
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
      allow update: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }
    
    // eKYC verifications
    match /ekycVerifications/{verificationId} {
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
      allow update: if false; // Only updated by backend
      allow delete: if false; // Don't allow deletion of verifications
    }
    
    // Family members
    match /familyMembers/{memberId} {
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
      allow update: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }
    
    // Notifications
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow create: if false; // Only created by backend
      allow update: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }
  }
}
